<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--方式一：从文件获取属性，优先级高，推荐方式-->
    <properties resource="db.properties">
        <!-- 开启允许设置默认值，默认分隔符为: -->
        <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>

        <!-- 如果属性名中使用了:或者在SQL映射文件中使用了三元运算符，则需要修改默认值的分隔符，以下将默认值修改为?: -->
        <!--<property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:"/>-->
    </properties>

    <!--方式二：在xml中配置属性-->
    <!--<properties>
        <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url"
                  value="jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </properties>-->

    <settings>
        <!--开启日志，默认不开启，也可以配置为自带的COMMONS_LOGGING-->
        <setting name="logImpl" value="LOG4J"/>

        <!--开启驼峰命名，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>

    <!--为全限定类名设置别名，任何使用全限定类名的地方都可以使用别名代替-->
    <typeAliases>
        <!--手动定义和注解定义同一个类的别名，都会生效-->
        <!--方式一：定义单个别名-->
        <typeAlias type="com.test.mybatis.pojo.User" alias="myUser"/>

        <!--方式二：包扫描方式，批量定义别名
        每一个在包 com.test.mybatis.pojo 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。
        若有注解，则别名为其注解值。-->
        <package name="com.test.mybatis.pojo"/>
    </typeAliases>

    <!--MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用-->
    <!--使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可-->
    <plugins>
        <plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin>
    </plugins>

    <!--environment可以定义多个，使用时设置default来选择环境信息-->
    <!--尽管可以配置多个环境，但每个SqlSessionFactory实例只能选择一种环境-->
    <!--如果想连接两个数据库，就需要创建两个SqlSessionFactory实例，每个数据库对应一个-->
    <environments default="development">
        <!--环境信息一-->
        <environment id="development">
            <!--事务管理器，以下使用了JDBC的提交和回滚事务-->
            <transactionManager type="JDBC"/>
            <!--数据源-->
            <dataSource type="POOLED">
                <!--和<properties resource="db.properties"/>联合使用，动态配置-->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <!--从 MyBatis 3.4.2 开始，你可以为占位符指定一个默认值，如下，如果属性username没有配置，则设置为默认值admin-->
                <property name="username" value="${username:admin}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>

        <!--环境信息二-->
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--每个定义的mapper文件都需要在MyBatis核心配置文件中注册-->
    <mappers>
        <!--和其他使用方式互斥，mapper文件和调用方法的dao接口位于相同包下，且名字一致-->
        <!--<package name="com.test.mybatis.dao"/>-->

        <!--使用资源方式注册-->
        <mapper resource="mapper/user-mapper.xml"/>

        <!--使用接口或类的方式注册，注解方式时使用-->
        <mapper class="com.test.mybatis.dao.UserAnnotationDao"/>

        <mapper resource="mapper/person-mapper.xml"/>
        <mapper resource="mapper/student-teacher-mapper.xml"/>
        <mapper resource="mapper/blog-mapper.xml"/>
    </mappers>
</configuration>