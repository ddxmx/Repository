<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--    数据源信息-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url"
                  value="jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--        绑定数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--        关联Mybatis-->
        <property name="configLocation" value="mybatis-config.xml"/>
        <property name="mapperLocations"
                  value="mapper/user-mapper.xml"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <!--利用构造器注入-->
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <bean id="userDao" class="com.test.dao.UserDaoImpl">
        <!--        set方法-->
        <property name="template" ref="sqlSessionTemplate"/>
    </bean>

    <!--    事务管理-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg ref="dataSource"/>
    </bean>

    <!--配置事务通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--配置哪些方法使用什么样的事务,配置事务的传播特性-->
            <!--spring事务传播特性：-->
            <!--事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：-->
            <!--propagation_required：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。-->
            <!--propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。-->
            <!--propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。-->
            <!--propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。-->
            <!--propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。-->
            <!--propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。-->
            <!--propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作-->

            <!-- 事务的传播特性 -->
            <!--SUPPORTS 支持当前事务，如果当前没有事务，就使用无事务 -->
            <!--REQUIRED 支持当前事务，如果没有事务则新建事务，默认值-->
            <!--REQUIRES_NEW 如果有当前事务，则挂起当前事务，新建新事务，反之，直接新建事务-->
            <!--MANDATORY 支持当前事务，如果没有事务，则抛出异常-->
            <!--timeout 事务超时时间 默认值是-1，-1表示不超时，以秒为单位-->
            <!--read-only 事务是否只读，默认值是false，-->

            <!--Spring 默认的事务传播行为是 PROPAGATION_REQUIRED，它适合于绝大多数的情况。-->
            <!--假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了）-->
            <!--假设程序中存在如下的调用链：Service1#method1()->Service2#method2()->Service3#method3()-->
            <!--那么这 3 个服务类的 3个方法通过 Spring 的事务传播机制都工作在同一个事务中。就好比，我们刚才的几个方法存在调用，所以会被放在一组事务当中-->

            <!--            里面包含多个操作-->
            <tx:method name="trans" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--配置aop织入事务-->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.test.dao.UserDaoImpl.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!--    绝对使用类还是接口的代理-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
</beans>